operating system wikipedia move sidebar hide main pagecontentscurrent eventsrandom articleabout wikipediacontact us contribute helplearn editcommunity portalrecent changesupload filespecial pages donate personal donate pages logged editors learn contributionstalk contents move sidebar hide top definition purpose types operating systems toggle types operating systems subsection multicomputer operating systems distributed systems embedded realtime hypervisor library history toggle history subsection microcomputers components toggle components subsection kernel program execution interrupts software interrupt signal hardware interrupt inputoutput interruptdriven io direct memory access memory management virtual memory concurrency file system security user interface operating system development hobby diversity operating systems portability popular operating systems toggle popular operating systems subsection linux microsoft windows see also notes references reading external links toggle table contents operating system achafrikaansalemannischngliscaragonsasturianuavaeazrbaycanca bnlmg bosanskibrezhonegcataletinacymraegdanskdavvismegielladeutscheestiemilin e rumagnlespaolesperantoeuskarafiji hindifranaisfurlangaeilgegalego hakknghornjoserbscehrvatskiidoilokanobahasa indonesiainterlinguainterlingueisizuluslenskaitalianojawa kaszbsczikiswahilikurdlatinalatvieultzebuergeschlietuviligurelinglalingua franca novalombardmagyarmadhurmalagasybahasa melayuminangkabau mngdngngmirandsnederlands nordfriisknorsk bokmlnorsk nynorskoccitan ozbekcha plzischpiemontisplattdtschpolskiportugusqaraqalpaqsharipoarischromnruna simi sarduscotsshqipsimple englishsloveninasloveninalnskisoomaaliga srpskisrpskohrvatski sundasuomisvenskatagalogtaqbaylit tataratrke uyghurchevnetoting vitvrowalonwinaraywolofyorbzazakiemaitka english readview source move sidebar hide actions readview source general links hererelated changesupload filepermanent linkpage informationcite pageget shortened urldownload qr code printable version projects wikimedia commonswikibookswikinewswikidata item move sidebar hide wikipedia free encyclopedia redirected operating systems software manages computer hardware resources operating systems common features process management interrupts memory management file system device drivers networking security inputoutput vte operating system os system software manages computer hardware software resources provides common services computer programs timesharing operating systems schedule tasks efficient use system may also include accounting software cost allocation processor time mass storage peripherals resources hardware functions input output memory allocation operating system acts intermediary programs computer hardware although application code usually executed directly hardware frequently makes system calls os function interrupted operating systems found many devices contain computer cellular phones video game consoles web servers supercomputers september update android popular operating system market share followed microsoft windows ios ipados macos linux android ios ipados mobile operating systems windows macos linux desktop operating systems linux distributions dominant server supercomputing sectors specialized classes operating systems specialpurpose operating systems embedded realtime systems exist many applications securityfocused operating systems also exist operating systems low system requirements eg lightweight linux distribution others may higher system requirements operating systems require installation may come preinstalled purchased computers oeminstallation whereas others may run directly media ie live cd flash memory ie liveusb usb stick definition purpose operating system difficult define called layer software manages computers resources users applications operating systems include software always running called kernelbut include software well two types programs run computer system programswhich associated operating system may part kerneland applicationsall software three main purposes operating system fulfills operating systems allocate resources different applications deciding receive central processing unit cpu time space memory modern personal computers users often want run several applications order ensure one program monopolize computers limited hardware resources operating system gives application share resource either time cpu space memory operating system also must isolate applications protect errors security vulnerabilities another applications code enable communications different applications operating systems provide interface abstracts details accessing hardware details physical memory make things easier programmers virtualization also enables operating system mask limited hardware resources example virtual memory provide program illusion nearly unlimited memory exceeds computers actual memory operating systems provide common services interface accessing network disk devices enables application run different hardware without needing rewritten services include operating system varies greatly functionality makes great majority code operating systems types operating systems multicomputer operating systems multiprocessors multiple cpus share memory multicomputer cluster computer multiple cpus memory multicomputers developed large multiprocessors difficult engineer prohibitively expensive universal cloud computing size machine needed different cpus often need send receive messages ensure good performance operating systems machines need minimize copying packets newer systems often multiqueueseparating groups users separate queuesto reduce need packet copying support concurrent users another technique remote direct memory access enables cpu access memory belonging cpus multicomputer operating systems often support remote procedure calls cpu call procedure another cpu distributed shared memory operating system uses virtualization generate shared memory physically exist distributed systems distributed system group distinct networked computerseach might operating system file system unlike multicomputers may dispersed anywhere world middleware additional software layer operating system applications often used improve consistency although functions similarly operating system true operating system embedded embedded operating systems designed used embedded computer systems whether internet things objects connected network embedded systems include many household appliances distinguishing factor load userinstalled software consequently need protection different applications enabling simpler designs small operating systems might run less kilobytes smallest smart cards examples include embedded linux qnx vxworks extrasmall systems riot tinyos realtime realtime operating system operating system guarantees process events data specific moment time hard realtime systems require exact timing common manufacturing avionics military similar uses soft realtime systems occasional missed event acceptable category often includes audio multimedia systems well smartphones order hard realtime systems sufficiently exact timing often library protection applications ecos hypervisor hypervisor operating system runs virtual machine virtual machine unaware application operates hardware virtual machines paused saved resumed making useful operating systems development debugging also enhance portability enabling applications run computer even compatible base operating system library library operating system libos one services typical operating system provides networking provided form libraries composed single application configuration code construct unikernel specialized absolute necessary pieces code extracted libraries bound together single address space machine image deployed cloud embedded environments operating system code application code executed separated protection domains single application running least conceptually need prevent interference applications os services accessed via simple library calls potentially inlining based compiler thresholds without usual overhead context switches way similarly embedded realtime oses note overhead negligible direct cost mode switching necessary add indirect pollution important processor structures like cpu caches instruction pipeline affects usermode kernelmode performance history main article history operating systems ibm system model operators console cpu operators console terminal used operating system communicate operator first computers late directly programmed either plugboards machine code inputted media punch cards without programming languages operating systems introduction transistor mids mainframes began built still needed professional operators manually modern operating system would scheduling programs run mainframes still rudimentary operating systems fortran monitor system fms ibsys ibm introduced first series intercompatible computers system ran operating systemoswhich consisted millions lines assembly language thousands bugs os also first popular operating system support multiprogramming cpu could put use one job another waiting inputoutput io holding multiple jobs memory necessitated memory partitioning safeguards one job accessing memory allocated different one around time teleprinters began used terminals multiple users could access computer simultaneously operating system multics intended allow hundreds users access large computer despite limited adoption considered precursor cloud computing unix operating system originated development multics single user unixs source code available became basis incompatible operating systems successful atts system v university californias berkeley software distribution bsd increase compatibility ieee released posix standard operating system application programming interfaces apis supported unix systems minix strippeddown version unix developed educational uses inspired commercially available free software linux since minix used controllers intel microchips linux widespread data centers android smartphones microcomputers commandline interface msdos operating system graphical user interface macintosh invention large scale integration enabled production personal computers initially called microcomputers around around five years cpm control program microcomputers popular operating system microcomputers later ibm bought dos disk operating system microsoft modifications requested ibm resulting system called msdos microsoft disk operating system widely used ibm microcomputers later versions increased sophistication part borrowing features unix apples macintosh first popular computer use graphical user interface gui gui proved much user friendly textonly commandline interface earlier operating systems used following success macintosh msdos updated gui overlay called windows windows later rewritten standalone operating system borrowing many features another vax vms large legal settlement paid twentyfirst century windows continues popular personal computers less market share servers unix operating systems especially linux popular enterprise systems servers also used mobile devices many computer systems mobile devices symbian os dominant first usurped blackberry os introduced ios iphones later opensource android operating system introduced linux kernel c library bionic partially based bsd code became popular components components operating system designed ensure various parts computer function cohesively de facto obsoletion dos user software must interact operating system access hardware kernel main article kernel operating system kernel connects application software hardware computer kernel part operating system provides protection different applications users protection key improving reliability keeping errors isolated one program well security limiting power malicious software protecting private data ensuring one program monopolize computers resources operating systems two modes operation user mode hardware checks software executing legal instructions whereas kernel unrestricted powers subject checks kernel also manages memory processes controls access inputoutput devices program execution operating system provides interface application program computer hardware application program interact hardware obeying rules procedures programmed operating system operating system also set services simplify development execution application programs executing application program typically involves creation process operating system kernel assigns memory space resources establishes priority process multitasking systems loads program binary code memory initiates execution application program interacts user hardware devices however systems application request operating system execute another application within process either subroutine separate thread eg link attach facilities os successors interrupts main article interrupt interrupt also known abort exception fault signal trap provides efficient way operating systems react environment interrupts cause central processing unit cpu control flow change away currently running program interrupt handler also known interrupt service routine isr interrupt service routine may cause central processing unit cpu context switcha details computer processes interrupt vary architecture architecture details interrupt service routines behave vary operating system operating system however several interrupt functions common architecture operating system must transfer control interrupt service routine save state currently running process restore state interrupt serviced software interrupt software interrupt message process event occurred contrasts hardware interrupt message central processing unit cpu event occurred software interrupts similar hardware interrupts change away currently running process similarly hardware software interrupts execute interrupt service routine software interrupts may normally occurring events expected time slice occur kernel perform context switch computer program may set timer go seconds case much data causes algorithm take long software interrupts may error conditions malformed machine instruction however common error conditions division zero accessing invalid memory address users send messages kernel modify behavior currently running process example commandline environment pressing interrupt character usually controlc might terminate currently running process generate software interrupts x cpus int assembly language instruction available syntax int x x offset number hexadecimal format interrupt vector table signal generate software interrupts unixlike operating systems killpidsignum system call send signal another process pid process identifier receiving process signum signal number mnemonic formatb sent abrasive name kill chosen early implementations terminated process unixlike operating systems signals inform processes occurrence asynchronous events communicate asynchronously interrupts required one reason process needs asynchronously communicate another process solves variation classic readerwriter problem writer receives pipe shell output sent readers input stream commandline syntax alpha bravo alpha write pipe computation ready sleep wait queue bravo moved ready queue soon read input stream kernel generate software interrupts coordinate piping signals may classified categories categories process finishes normally process error exception process runs system resource process executes illegal instruction process sets alarm event process aborted keyboard process tracing alert debugging hardware interrupt inputoutput io devices slower cpu therefore would slow computer cpu wait io finish instead computer may implement interrupts io completion avoiding need polling busy waiting computers require interrupt character word costing significant amount cpu time direct memory access dma architecture feature allow devices bypass cpu access main memory directly separate architecture device may perform direct memory accessc main memory either directly via busd inputoutput interruptdriven io section needs expansion help making edit requestadding april computer user types key keyboard typically character appears immediately screen likewise user moves mouse cursor immediately moves across screen keystroke mouse movement generates interrupt called interruptdriven io interruptdriven io occurs process causes interrupt every character word transmitted direct memory access devices hard disk drives solidstate drives magnetic tape drives transfer data rate high enough interrupting cpu every byte word transferred cpu transfer byte word device memory would require much cpu time data instead transferred device memory independently cpu hardware channel direct memory access controller interrupt delivered data transferred computer program executes system call perform block io write operation system call might execute following instructions set contents cpus registers including program counter process control block create entry devicestatus table operating system maintains table keep track processes waiting devices one field table memory address process control block place characters sent device memory buffer set memory address memory buffer predetermined device register set buffer size integer another predetermined register execute machine instruction begin writing perform context switch next process ready queue writing takes place operating system context switch processes normal device finishes writing device interrupt currently running process asserting interrupt request device also place integer onto data bus upon accepting interrupt request operating system push contents program counter register followed status register onto call stack push contents registers onto call stack alternatively contents registers may placed system table read integer data bus integer offset interrupt vector table vector tables instructions access devicestatus table extract process control block perform context switch back writing process writing process time slice expired operating system pop call stack registers status register program counter pop call stack status register pop call stack address next instruction set back program counter program counter reset interrupted process resume time slice memory management main article memory management among things multiprogramming operating system kernel must responsible managing system memory currently use programs ensures program interfere memory already use another program since programs time share program must independent access memory cooperative memory management used many early operating systems assumes programs make voluntary use kernels memory manager exceed allocated memory system memory management almost never seen anymore since programs often contain bugs cause exceed allocated memory program fails may cause memory used one programs affected overwritten malicious programs viruses may purposefully alter another programs memory may affect operation operating system cooperative memory management takes one misbehaved program crash system memory protection enables kernel limit process access computers memory various methods memory protection exist including memory segmentation paging methods require level hardware support mmu exist computers segmentation paging certain protected mode registers specify cpu memory address allow running program access attempts access addresses trigger interrupt causes cpu reenter supervisor mode placing kernel charge called segmentation violation segv short since difficult assign meaningful result operation usually sign misbehaving program kernel generally resorts terminating offending program reports error windows versions level memory protection programs could easily circumvent need use general protection fault would produced indicating segmentation violation occurred however system would often crash anyway virtual memory main article virtual memory information page fault many operating systems trick programs using memory scattered around hard disk ram one continuous chunk memory called virtual memory use virtual memory addressing paging segmentation means kernel choose memory program may use given time allowing operating system use memory locations multiple tasks program tries access memory accessiblee memory nonetheless allocated kernel interrupted see memory management kind interrupt typically page fault kernel detects page fault generally adjusts virtual memory range program triggered granting access memory requested gives kernel discretionary power particular applications memory stored even whether allocated yet modern operating systems memory accessed less frequently temporarily stored disk media make space available use programs called swapping area memory used multiple programs memory area contains swapped exchanged demand virtual memory provides programmer user perception much larger amount ram computer really concurrency see also computer multitasking process management computing concurrency refers operating systems ability carry multiple tasks simultaneously virtually modern operating systems support concurrency threads enable splitting process work multiple parts run simultaneously number threads limited number processors available threads processors operating system kernel schedules suspends resumes threads controlling thread runs much cpu time receives context switch running thread suspended state saved thread control block stack state new thread loaded historically many systems thread could run relinquished control cooperative multitasking model allow single thread monopolize processor operating systems interrupt thread preemptive multitasking threads thread id program counter pc register set stack share code heap data resources threads process thus less overhead create thread new process singlecpu systems concurrency switching processes many computers multiple cpus parallelism multiple threads running different cpus speed program depending much executed concurrently file system main article file system see also virtual file system file systems allow users programs organize sort files computer often use directories folders permanent storage devices used twentyfirst century computers unlike volatile dynamic randomaccess memory dram still accessible crash power failure permanent nonvolatile storage much cheaper per byte takes several orders magnitude longer access read write two main technologies hard drive consisting magnetic disks flash memory solidstate drive stores data electrical circuits latter expensive faster durable file systems abstraction used operating system simplify access permanent storage provide humanreadable filenames metadata increase performance via amortization accesses prevent multiple threads accessing section memory include checksums identify corruption file systems composed files named collections data arbitrary size directories also called folders list humanreadable filenames directories absolute file path begins root directory lists subdirectories divided punctuation relative path defines location file directory system calls sometimes wrapped libraries enable applications create delete open close files well link read write operations carried operating system behalf application operating systems efforts reduce latency include storing recently requested blocks memory cache prefetching data application asked might need next device drivers software specific inputoutput io device enables operating system work without modification different hardware another component file systems dictionary maps files name metadata data block contents stored file systems use directories convert file names file numbers find block number operating system uses index often implemented tree separately free space map track free blocks commonly implemented bitmap although free block used store new file many operating systems try group together files directory maximize performance periodically reorganize files reduce fragmentation maintaining data reliability face computer crash hardware failure another concern file writing protocols designed atomic operations leave permanent storage partially written inconsistent state event crash point writing data corruption addressed redundant storage example raidredundant array inexpensive disks checksums detect data corrupted multiple layers checksums backups file system recover multiple hardware failures background processes often used detect recover data corruption security main article computer security security means protecting users users computer well seeking remote access network operating systems security rests achieving cia triad confidentiality unauthorized users access data integrity unauthorized users modify data availability ensuring system remains available authorized users even event denial service attack computer systems isolating security domainsin case operating systems kernel processes virtual machinesis key achieving security ways increase security include simplicity minimize attack surface locking access resources default checking requests authorization principle least authority granting minimum privilege essential performing task privilege separation reducing shared data operating system designs secure others isolation kernel applications least secure monolithic kernel like generalpurpose operating systems still vulnerable part kernel compromised secure design features microkernels separate kernels privileges many separate security domains reduce consequences single kernel breach unikernels another approach improves security minimizing kernel separating operating systems functionality application operating systems written c c create potential vulnerabilities exploitation despite attempts protect vulnerabilities caused buffer overflow attacks enabled lack bounds checking hardware vulnerabilities caused cpu optimizations also used compromise operating system known instances operating system programmers deliberately implanting vulnerabilities back doors operating systems security hampered increasing complexity resulting inevitability bugs formal verification operating systems may feasible developers use operating system hardening reduce vulnerabilities eg address space layout randomization controlflow integrity access restrictions techniques restrictions contribute code open source operating systems operating systems transparent change histories distributed governance structures open source developers strive work collaboratively find eliminate security vulnerabilities using code review type checking expunge malicious code andrew tanenbaum advises releasing source code operating systems arguing prevents developers placing trust secrecy thus relying unreliable practice security obscurity user interface main article operating system user interface user interface ui essential support human interaction computer two common user interface types computer commandline interface computer commands typed linebyline graphical user interface gui using visual environment commonly combination window icon menu pointer elements also known wimp personal computers including smartphones tablet computers workstations user input typically combination keyboard mouse trackpad touchscreen connected operating system specialized software personal computer users software developers coders often prefer guis input output guis supported personal computers software support guis complex command line input plain text output plain text output often preferred programmers easy support operating system development hobby main article hobbyist operating system hobby operating system may classified one whose code directly derived existing operating system users active developers cases hobby development support homebrew computing device example simple singleboard computer powered microprocessor development may architecture already widespread use operating system development may come entirely new concepts may commence modeling existing operating system either case hobbyist herhis developer may interact small sometimes unstructured group individuals like interests examples hobby operating systems include syllable templeos diversity operating systems portability application written use specific operating system ported another os functionality required application may implemented differently os names functions meaning arguments etc requiring application adapted changed otherwise maintained cost supporting operating systems diversity avoided instead writing applications software platforms java qt abstractions already borne cost adaptation specific operating systems system libraries another approach operating system vendors adopt standards example posix os abstraction layers provide commonalities reduce porting costs popular operating systems information usage share operating systems comparison operating systems september update android based linux kernel popular operating system market share followed microsoft windows ios ipados macos linux android ios ipados mobile operating systems windows macos linux desktop operating systems linux main article linux layers linux system linux free software distributed gnu general public license gpl means derivatives legally required release source code linux designed programmers use thus emphasizing simplicity consistency small number basic elements combined nearly unlimited ways avoiding redundancy design similar unix systems using microkernel written c uses unix system v syntax also supports bsd syntax linux supports standard unix networking features well full suite unix supporting multiple users employing preemptive multitasking initially minimalist design linux flexible system work mb ram still used large multiprocessor systems similar unix systems linux distributions composed kernel system libraries system utilities linux graphical user interface gui desktop folder file icons well option access operating system via command line android partially opensource operating system closely based linux become widely used operating system users due popularity smartphones lesser extent embedded systems needing gui smart watches automotive dashboards airplane seatbacks medical devices home appliances unlike linux much android written java uses objectoriented design microsoft windows main article microsoft windows security descriptor file readonly default specified access elvis readwrite access cathy full access ida owner file windows proprietary operating system widely used desktop computers laptops tablets phones workstations enterprise servers xbox consoles operating system designed security reliability compatibility high performance extensibility portability international supportlater energy efficiency support dynamic devices also became priorities windows executive works via kernelmode objects important data structures like processes threads sections memory objects example files operating system supports demand paging virtual memory speeds io many applications io device drivers use windows driver model ntfs file system master table file represented record metadata scheduling includes preemptive multitasking windows many security features especially important use accesscontrol lists integrity levels every process authentication token object given security descriptor later releases added even security features see also comparison operating systems dbos interruptible operating system list operating systems list pioneers computer science glossary operating systems terms microcontroller network operating system objectoriented operating system lisp machine operating system projects system commander system image timeline operating systems notes modern cpus provide instructions eg sysenter invoke selected kernel services without interrupts visit httpswikiosdevorgsysenter information examples include sigint sigsegv sigbus often form dma chip smaller systems io channels larger systems modern motherboards dma controller additionally device may also one visit scsi rdma protocol several reasons memory might inaccessible address might range address might refer page segment moved backing store address might refer memory restricted access due eg key ring references stallings operating systems internals design principles pearson prentice hall p dhotre ia operating systems technical publications p b operating system market share worldwide statcounter global stats retrieved december vii specialpurpose systems operating system concepts seventh edition book wwworeillycom archived original june retrieved february specialpurpose operating systems rwth aachen university institute automation complex power systems english wwwacseonercrwthaachende archived original june retrieved february b tanenbaum bos p anderson dahlin p b silberschatz et al p b c anderson dahlin p anderson dahlin pp tanenbaum bos pp anderson dahlin p tanenbaum bos p b c anderson dahlin p anderson dahlin pp anderson dahlin pp tanenbaum bos p tanenbaum bos p b tanenbaum bos p tanenbaum bos p tanenbaum bos p tanenbaum bos p tanenbaum bos p tanenbaum bos p tanenbaum bos p tanenbaum bos pp tanenbaum bos p b c tanenbaum bos p silberschatz et al pp silberschatz et al pp anderson dahlin p madhavapeddy anil scott david j november unikernels rise virtual library operating system software layers virtual appliance compiled within safe highlevel language framework queue vol new york ny usa acm pp doi issn retrieved august build process unikraft archived original april retrieved august leave os home rise library operating systems acm sigarch september archived original march retrieved august soares livio baldini stumm michael october flexsc flexible system call scheduling exceptionless system calls osdi th usenix symposium operating system design implementation usenix retrieved august p synchronous implementation system calls negatively impacts performance system intensive workloads terms direct costs mode switching interestingly terms indirect pollution important processor structures affects usermode kernelmode performance motivating example quantifies impact system call pollution application performance seen figure depicts usermode instructions per cycles kernel cycles instructions ignored one spec cpu benchmarks xalan immediately pwrite system call significant drop instructions per cycle ipc due system call takes cycles execution ipc application returns previous level show performance degradation mainly due interference caused kernel key processor structures b tanenbaum bos p arpacidusseau remzi arpacidusseau andrea operating systems three easy pieces archived original july retrieved july tanenbaum bos p tanenbaum bos pp tanenbaum bos pp tanenbaum bos pp tanenbaum bos p tanenbaum bos pp b tanenbaum bos p tanenbaum bos p tanenbaum bos p tanenbaum bos pp anderson dahlin pp tanenbaum bos p anderson dahlin pp anderson dahlin pp b kerrisk michael linux programming interface starch press p isbn signal notification process event occurred signals sometimes described software interrupts hyde randall chapter seventeen interrupts traps exceptions part art assembly language programming starch press archived original december retrieved december concept interrupt something expanded scope years x family added confusion surrounding interrupts introducing int software interrupt instruction indeed different manufacturers used terms like exceptions faults aborts traps interrupts describe phenomena chapter discusses unfortunately clear consensus exact meaning terms different authors adopt different terms use tanenbaum andrew structured computer organization third edition prentice hall p isbn like trap interrupt stops running program transfers control interrupt handler performs appropriate action finished interrupt handler returns control interrupted program silberschatz abraham operating system concepts fourth edition addisonwesley p isbn interrupt trap occurs hardware transfers control operating system first operating system preserves state cpu storing registers program counter determines type interrupt occurred type interrupt separate segments code operating system determine action taken silberschatz abraham operating system concepts fourth edition addisonwesley p isbn switching cpu another process requires saving state old process loading saved state new process task known context switch b c e silberschatz abraham operating system concepts fourth edition addisonwesley p isbn silberschatz abraham operating system concepts fourth edition addisonwesley p isbn hardware may trigger interrupt time sending signal cpu usually way system bus kerrisk michael linux programming interface starch press p isbn signals analogous hardware interrupts interrupt normal flow execution program cases possible predict exactly signal arrive kerrisk michael linux programming interface starch press p isbn among types events cause kernel generate signal process following software event occurred example processs cpu time limit exceeded b c e kerrisk michael linux programming interface starch press p isbn intel ia architectures software developers manual pdf intel corporation september p archived pdf original march retrieved may b c bach maurice j design unix operating system prenticehall p isbn kerrisk michael linux programming interface starch press p isbn b tanenbaum andrew structured computer organization third edition prentice hall p isbn silberschatz abraham operating system concepts fourth edition addisonwesley p isbn haviland keith salama ben unix system programming addisonwesley publishing company p isbn haviland keith salama ben unix system programming addisonwesley publishing company p isbn b haviland keith salama ben unix system programming addisonwesley publishing company p isbn tanenbaum andrew structured computer organization third edition prentice hall p isbn ibm september main storage pdf ibm system principles operation pdf eighth edition p archived pdf original march retrieved april b tanenbaum andrew structured computer organization third edition prentice hall p isbn program interrupt controller pic pdf users handbook pdp pdf digital equipment corporation pp f archived pdf original may retrieved april pdp inputoutput systems manual pdf digital equipment corporation pp archived pdf original january retrieved august silberschatz abraham operating system concepts fourth edition addisonwesley p isbn silberschatz abraham operating system concepts fourth edition addisonwesley p isbn b tanenbaum andrew structured computer organization third edition prentice hall p isbn b tanenbaum andrew structured computer organization third edition prentice hall p isbn tanenbaum andrew structured computer organization third edition prentice hall p isbn stallings william computer organization architecture new delhi prenticehall india private limited p isbn anderson dahlin p silberschatz et al p anderson dahlin p anderson dahlin p anderson dahlin pp anderson dahlin p silberschatz et al p anderson dahlin p silberschatz et al p silberschatz et al pp silberschatz et al p anderson dahlin pp tanenbaum bos pp anderson dahlin pp tanenbaum bos p anderson dahlin pp anderson dahlin p anderson dahlin pp tanenbaum bos pp anderson dahlin pp anderson dahlin p anderson dahlin p tanenbaum bos p anderson dahlin p b anderson dahlin p anderson dahlin p anderson dahlin pp anderson dahlin pp tanenbaum bos pp b anderson dahlin p tanenbaum bos pp tanenbaum bos p tanenbaum bos p tanenbaum bos pp b tanenbaum bos p tanenbaum bos pp tanenbaum bos pp tanenbaum bos pp tanenbaum bos pp tanenbaum bos pp tanenbaum bos p tanenbaum bos p tanenbaum bos p richet bouaynaya p richet bouaynaya pp berntsso strandn warg pp sfn error target citerefberntssostrandnwarg help tanenbaum bos p tanenbaum bos pp tanenbaum bos pp tanenbaum bos p holwerda thom december os less hobby os news retrieved june silberschatz et al pp tanenbaum bos pp b silberschatz et al p vaughannichols steven linus torvalds prepares move linux kernel modern c zdnet retrieved february silberschatz et al p tanenbaum bos pp tanenbaum bos pp tanenbaum bos p tanenbaum bos pp tanenbaum bos p silberschatz et al p b tanenbaum bos p b tanenbaum bos p silberschatz et al p silberschatz et al p reading anderson thomas dahlin michael operating systems principles practice recursive books isbn auslander larkin c scherr l september evolution mvs operating system ibm journal development doird issn berntsson petter sainio strandn lars warg fredrik evaluation open source operating systems safetycritical applications springer international publishing pp isbn deitel harvey deitel paul choffnes david december operating systems pearsonprentice hall isbn bic lubomur f shaw alan c operating systems pearson prentice hall silberschatz avi galvin peter gagne greg operating systems concepts john wiley sons isbn obrien j marakas g management information systems e mcgrawhill irwin leva alberto maggio martina papadopoulos alessandro vittorio terraneo federico controlbased operating system design iet isbn richet jeanloup bouaynaya wafa understanding managing complex software vulnerabilities empirical analysis opensource operating systems systmes dinformation management doisim inactive november cite journal cs maint doi inactive november link silberschatz abraham galvin peter b gagne greg operating system concepts ed wiley isbn tanenbaum andrew bos herbert modern operating systems global edition pearson higher ed isbn external links look operating system wiktionary free dictionary wikimedia commons media related operating systems wikiversity learning resources operating systems multics history history operating systems vteoperating systemsgeneral comparison forensic engineering history list timeline usage share user features comparison variants disk operating system distributed operating system embedded operating system hobbyist operating system enough operating system mobile operating system network operating system objectoriented operating system realtime operating system supercomputer operating system kernelarchitectures exokernel hybrid microkernel monolithic multikernel vkernel rump kernel unikernel components device driver loadable kernel module user space kernel space process managementconcepts computer multitasking cooperative preemptive context switch interrupt ipc process process control block realtime thread timesharing schedulingalgorithms fixedpriority preemptive multilevel feedback queue roundrobin shortest job next memory managementresource protection bus error general protection fault memory paging memory protection protection ring segmentation fault virtual memory storage accessfile systems boot loader defragmentation device file file attribute inode journal partition virtual file system virtual tape library supporting concepts api computer network hal live cd live usb shell cli user interface pxe vtecomputer sciencenote template roughly follows acm computing classification systemhardware printed circuit board peripheral integrated circuit verylargescale integration system chip soc energy consumption green computing electronic design automation hardware acceleration processor size form computer systems organization computer architecture computational complexity dependability embedded system realtime computing cyberphysical system fault tolerance wireless sensor network networks network architecture network protocol network components network scheduler network performance evaluation network service software organization interpreter middleware virtual machine operating system software quality software notations programming paradigm programming domainspecific software framework integrated development environment software configuration management software library software repository software development control variable software development process requirements analysis software design software construction software deployment software engineering software maintenance programming team opensource model theory computation model computation stochastic formal computability theory computational complexity theory logic semantics algorithms algorithm design analysis algorithms algorithmic efficiency randomized algorithm computational geometry mathematics computing discrete mathematics probability statistics mathematical software information theory mathematical analysis numerical analysis theoretical computer science information systems database management system information storage systems enterprise information system social information systems geographic information system decision support system process control system multimedia information system data mining digital library computing platform digital marketing world wide web information retrieval security cryptography formal methods security hacker security services intrusion detection system hardware security network security information security application security humancentered computing interaction design augmented reality virtual reality social computing ubiquitous computing visualization accessibility humancomputer interaction mobile computing concurrency concurrent computing parallel computing distributed computing multithreading multiprocessing artificial intelligence natural language processing knowledge representation reasoning computer vision automated planning scheduling methodology control method philosophy artificial intelligence distributed artificial intelligence machine learning supervised learning unsupervised learning reinforcement learning multitask learning crossvalidation graphics animation rendering photograph manipulation graphics processing unit image compression solid modeling applied computing quantum computing ecommerce enterprise software computational mathematics computational physics computational chemistry computational biology computational social science computational engineering differentiable computing computational healthcare digital art electronic publishing cyberwarfare electronic voting video games word processing operations educational technology document management category outline glossaries authority control databases internationalfastnationalgermanyunited statesfrancebnf datajapanczech republicisrael retrieved httpsenwikipediaorgwindexphptitleoperatingsystemoldid category operating systemshidden categories harv sfn notarget errorsarticles short descriptionshort description matches wikidatawikipedia pages semiprotected vandalismwikipedia indefinitely moveprotected pagesuse dmy dates july articles containing potentially dated statements september articles containing potentially dated statementsarticles expanded april articles expandedcs maint doi inactive november commons category link wikidata page last edited may utc text available creative commons attributionsharealike license additional terms may apply using site agree terms use privacy policy wikipedia registered trademark wikimedia foundation inc nonprofit organization privacy policy wikipedia disclaimers contact wikipedia code conduct developers statistics cookie statement mobile view toggle table contents operating system add topic