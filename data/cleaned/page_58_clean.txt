software testing wikipedia move sidebar hide main pagecontentscurrent eventsrandom articleabout wikipediacontact us contribute helplearn editcommunity portalrecent changesupload filespecial pages donate personal donate pages logged editors learn contributionstalk contents move sidebar hide top economics history goals toggle goals subsection finding bugs ensuring requirements satisfied code coverage categories toggle categories subsection automated testing levels unit testing integration testing system testing static dynamic passive testing exploratory preset testing vs adaptive testing blackwhite box whitebox testing blackbox testing visual testing greybox testing installation testing compatibility testing smoke sanity testing regression testing acceptance testing alpha testing beta testing functional vs nonfunctional testing continuous testing destructive testing software performance testing usability testing accessibility testing common standards compliance security testing internationalization localization development testing ab testing concurrent testing conformance testing type testing output comparison testing property testing metamorphic testing vcr testing teamwork toggle teamwork subsection roles processes waterfall development agile development sample process quality toggle quality subsection software verification validation software quality assurance measures artifacts test plan traceability matrix test case test script test suite test fixture test data test harness test run certifications controversy see also references reading external links toggle table contents software testing cataletinadeutscheestiespaoleuskarafranaisidobahasa indonesiaitalianolatvieumagyarbahasa melayunederlandsnorsk bokmlpolskiportugusqaraqalpaqsharomnshqipsimple englishslovenina srpskisuomisvenskatrketing vit english readedit move sidebar hide actions readedit general links hererelated changesupload filepermanent linkpage informationcite pageget shortened urldownload qr code printable version projects wikimedia commonswikibookswikiversitywikidata item move sidebar hide wikipedia free encyclopedia checking software standard part series onsoftware development core activities data modeling processes requirements design construction engineering testing debugging deployment maintenance paradigms models agile cleanroom incremental prototyping spiral v model waterfall methodologies frameworks asd dad devops dsdm fdd iid kanban lean sd less mdd msf psp rad rup safe scrum semat tdd tsp xp supporting disciplines configuration management deployment management documentation project management quality assurance user experience practices atdd bdd cco cd ci ddd pp sbe standup tdd build automation compiler debugger gui builder ide infrastructure code profiler release automation uml modeling standards bodies knowledge cmmi ieee standards ireb iso isoiec standards itil omg pmbok swebok glossaries artificial intelligence computer science electrical electronics engineering outlines outline software development vte testingcup polish championship software testing katowice may software testing act checking whether software satisfies expectations software testing provide objective independent information quality software risk failure user sponsor software testing determine correctness software specific scenarios determine correctness scenarios find bugs based criteria measuring correctness oracle software testing employs principles mechanisms might recognize problem examples oracles include specifications contracts comparable products past versions product inferences intended expected purpose user customer expectations relevant standards applicable laws software testing often dynamic nature running software verify actual output matches expected also static nature reviewing code associated documentation software testing often used answer question software supposed needs information learned software testing may used improve process software developed software testing follow pyramid approach wherein tests unit tests followed integration tests finally endtoend ee tests lowest proportion economics study conducted nist reported software bugs cost us economy billion annually third cost could avoided better software testing performeddubious discuss outsourcing software testing costs common china philippines india preferred destinations history glenford j myers initially introduced separation debugging testing although attention breakage testing successful test case one detects asyet undiscovered error illustrated desire software engineering community separate fundamental development activities debugging verification goals software testing typically goal driven finding bugs software testing typically includes handling software bugs defect code causes undesirable result bugs generally slow testing progress involve programmer assistance debug fix defects cause failure example defect dead code considered failure defect cause failure one point time may lead failure later due environmental changes examples environment change include running new computer hardware changes data interacting different software single defect may result multiple failure symptoms ensuring requirements satisfied software testing may involve requirements gap omission design requirement requirement gaps often nonfunctional requirements testability scalability maintainability performance security code coverage fundamental limitation software testing testing combinations inputs preconditions initial state feasible even simple product defects manifest unusual conditions difficult find testing also nonfunctional dimensions quality supposed versus supposed usability scalability performance compatibility reliability subjective something constitutes sufficient value one person may another although testing every possible input feasible testing use combinatorics maximize coverage minimizing tests categories main article software testing tactics testing categorized many ways automated testing paragraph excerpt test automation software testing test automation use software separate software tested control execution tests comparison actual outcomes predicted outcomes test automation automate repetitive necessary tasks formalized testing process already place perform additional testing would difficult manually test automation critical continuous delivery continuous testing levels software testing categorized levels based much software system focus test unit testing paragraph excerpt unit testing unit testing aka component module testing form software testing isolated source code tested validate expected behavior integration testing paragraph excerpt integration testing integration testing form software testing multiple software components modules services tested together verify work expected combined focus testing interactions data exchange integrated parts rather testing components isolation system testing paragraph excerpt system testing system testing aka endtoend ee testing testing conducted complete software system static dynamic passive testing many approaches software testing reviews walkthroughs inspections referred static testing whereas executing programmed code given set test cases referred dynamic testing static testing often implicit like proofreading plus programming text editors check source code structure compilers precompilers check syntax data flow static program analysis dynamic testing takes place program run dynamic testing may begin program complete order test particular sections code applied discrete functions modules typical techniques either using stubsdrivers execution debugger environment static testing involves verification whereas dynamic testing also involves validation passive testing means verifying systems behavior without interaction software product contrary active testing testers provide test data look system logs traces mine patterns specific behavior order make kind decisions related offline runtime verification log analysis exploratory section excerpt exploratory testing exploratory testing approach software testing concisely described simultaneous learning test design test execution cem kaner coined term defines exploratory testing style software testing emphasizes personal freedom responsibility individual tester continually optimize quality hisher work treating testrelated learning test design test execution test result interpretation mutually supportive activities run parallel throughout project preset testing vs adaptive testing type testing strategy performed depends whether tests applied iut decided testing plan starts executed preset testing whether input applied iut dynamically dependent outputs obtained application previous tests adaptive testing blackwhite box software testing often divided whitebox blackbox two approaches used describe point view tester takes designing test cases hybrid approach called greybox includes aspects boxes may also applied software testing methodology whitebox testing main article whitebox testing white box testing diagram whitebox testing also known clear box testing glass box testing transparent box testing structural testing verifies internal structures workings program opposed functionality exposed enduser whitebox testing internal perspective system source code well programming skills used design test cases tester chooses inputs exercise paths code determines appropriate outputs analogous testing nodes circuit eg incircuit testing ict whitebox testing applied unit integration system levels software testing process usually done unit level test paths within unit paths units integration subsystems systemlevel test though method test design uncover many errors problems might detect unimplemented parts specification missing requirements techniques used whitebox testing include api testing testing application using public private apis application programming interfaces code coverage creating tests satisfy criteria code coverage example test designer create tests cause statements program executed least fault injection methods intentionally introducing faults gauge efficacy testing strategies mutation testing methods static testing methods code coverage evaluate completeness test suite created method including blackbox testing allows software team examine parts system rarely tested ensures important function points tested code coverage software metric reported percentage function coverage reports functions executed statement coverage reports number lines executed complete test decision coverage reports whether true false branch given test executed statement coverage ensures code paths branches terms control flow executed least helpful ensuring correct functionality sufficient since code may process different inputs correctly incorrectly blackbox testing main article blackbox testing black box diagram blackbox testing also known functional testing describes designing test cases without knowledge implementation without reading source code testers aware software supposed blackbox testing methods include equivalence partitioning boundary value analysis allpairs testing state transition tables decision table testing fuzz testing modelbased testing use case testing exploratory testing specificationbased testing specificationbased testing aims test functionality software according applicable requirements level testing usually requires thorough test cases provided tester simply verify given input output value behavior either expected value specified test case test cases built around specifications requirements ie application supposed uses external descriptions software including specifications requirements designs derive test cases tests functional nonfunctional though usually functional specificationbased testing may necessary assure correct functionality insufficient guard complex highrisk situations black box testing used level testing although usually unit level component interface testing component interface testing variation blackbox testing focus data values beyond related actions subsystem component practice component interface testing used check handling data passed various units subsystem components beyond full integration testing units data passed considered message packets range data types checked data generated one unit tested validity passed another unit one option interface testing keep separate log file data items passed often timestamp logged allow analysis thousands cases data passed units days weeks tests include checking handling extreme data values interface variables passed normal values unusual data values interface help explain unexpected performance next unit visual testing aim visual testing provide developers ability examine happening point software failure presenting data way developer easily find information requires information expressed clearly core visual testing idea showing someone problem test failure rather describing greatly increases clarity understanding visual testing therefore requires recording entire test process capturing everything occurs test system video format output videos supplemented realtime tester input via pictureinapicture webcam audio commentary microphones visual testing provides number advantages quality communication increased drastically testers show problem events leading developer opposed describing need replicate test failures cease exist many cases developer evidence requires test failure instead focus cause fault fixed ad hoc testing exploratory testing important methodologies checking software integrity require less preparation time implement important bugs found quickly ad hoc testing testing takes place improvised impromptu way ability testers base testing documented methods improvise variations tests result rigorous examination defect fixes however unless strict documentation procedures maintained one limits ad hoc testing lack repeatability information graphical user interface testing greybox testing main article gray box testing greybox testing american spelling graybox testing involves using knowledge internal data structures algorithms purposes designing tests executing tests user blackbox level tester often access source code executable binary greybox testing may also include reverse engineering using dynamic code analysis determine instance boundary values error messages manipulating input data formatting output qualify greybox input output clearly outside black box calling system test distinction particularly important conducting integration testing two modules code written two different developers interfaces exposed test knowing underlying concepts software works tester makes betterinformed testing choices testing software outside typically greybox tester permitted set isolated testing environment activities seeding database tester observe state product tested performing certain actions executing sql statements database executing queries ensure expected changes reflected greybox testing implements intelligent test scenarios based limited information particularly apply data type handling exception handling concept greybox testing arbitrary distinction black whitebox testing faded somewhat installation testing section excerpt installation testing software systems installation procedures needed used main purpose testing procedures achieve installed software system may used known installation testing procedures may involve full partial upgrades installuninstall processes user must select variety options dependent files libraries must allocated loaded located valid hardware configurations must present software systems may need connectivity connect software systems compatibility testing main article compatibility testing common cause software failure real perceived lack compatibility application software operating systems operating system versions old new target environments differ greatly original terminal gui application intended run desktop required become web application must render web browser example case lack backward compatibility occur programmers develop test software latest version target environment users may running results unintended consequence latest work may function earlier versions target environment older hardware earlier versions target environment capable using sometimes issues fixed proactively abstracting operating system functionality separate program module library smoke sanity testing main article smoke testing software sanity testing determines whether reasonable proceed testing smoke testing consists minimal attempts operate software designed determine whether basic problems prevent working tests used build verification test regression testing main article regression testing regression testing focuses finding defects major code change occurred specifically seeks uncover software regressions degraded lost features including old bugs come back regressions occur whenever software functionality previously working correctly stops working intended typically regressions occur unintended consequence program changes newly developed part software collides previously existing code regression testing typically largest test effort commercial software development due checking numerous details prior software features even new software developed using old test cases test parts new design ensure prior functionality still supported common methods regression testing include rerunning previous sets test cases checking whether previously fixed faults reemerged depth testing depends phase release process risk added features either complete changes added late release deemed risky shallow consisting positive tests feature changes early release deemed low risk acceptance testing main article acceptance testing acceptance testing systemlevel testing ensure software meets customer expectations acceptance testing may performed part handoff process two phases development tests frequently grouped levels performed software development process level specificity test user acceptance testing uat operational acceptance testing oat contractual regulatory acceptance testing alpha beta testing sometimes uat performed customer environment hardware oat used conduct operational readiness prerelease product service system part quality management system oat common type nonfunctional software testing used mainly software development software maintenance projects type testing focuses operational readiness system supported become part production environment hence also known operational readiness testing ort operations readiness assurance ora testing functional testing within oat limited tests required verify nonfunctional aspects system addition software testing ensure portability system well working expected also damage partially corrupt operating environment cause processes within environment become inoperative contractual acceptance testing performed based contracts acceptance criteria defined agreement contract regulatory acceptance testing performed based relevant regulations software product two tests performed users independent testers regulation acceptance testing sometimes involves regulatory agencies auditing test results alpha testing alpha testing simulated actual operational testing potential userscustomers independent test team developers site alpha testing often employed offtheshelf software form internal acceptance testing software goes beta testing beta testing see also software release life cycle beta beta testing comes alpha testing considered form external user acceptance testing versions software known beta versions released limited audience outside programming team known beta testers software released groups people testing ensure product faults bugs beta versions made available open public increase feedback field maximal number future users deliver value earlier extended even indefinite period time perpetual beta functional vs nonfunctional testing functional testing refers activities verify specific action function code usually found code requirements documentation although development methodologies work use cases user stories functional tests tend answer question user particular feature work nonfunctional testing refers aspects software may related specific function user action scalability performance behavior certain constraints security testing determine breaking point point extremes scalability performance leads unstable execution nonfunctional requirements tend reflect quality product particularly context suitability perspective users continuous testing main article continuous testing continuous testing process executing automated tests part software delivery pipeline obtain immediate feedback business risks associated software release candidate continuous testing includes validation functional requirements nonfunctional requirements scope testing extends validating bottomup requirements user stories assessing system requirements associated overarching business goals destructive testing main article destructive testing destructive testing attempts cause software subsystem fail verifies software functions properly even receives invalid unexpected inputs thereby establishing robustness input validation errormanagement routines software fault injection form fuzzing example failure testing various commercial nonfunctional testing linked software fault injection page also numerous opensource free software available perform destructive testing information exception handling recovery testing software performance testing main article software performance testing performance testing generally executed determine system subsystem performs terms responsiveness stability particular workload also serve investigate measure validate verify quality attributes system scalability reliability resource usage load testing primarily concerned testing system continue operate specific load whether large quantities data large number users generally referred software scalability related load testing activity performed nonfunctional activity often referred endurance testing volume testing way test software functions even certain components example file database increase radically size stress testing way test reliability unexpected rare workloads stability testing often referred load endurance testing checks see software continuously function well acceptable period little agreement specific goals performance testing terms load testing performance testing scalability testing volume testing often used interchangeably realtime software systems strict timing constraints test timing constraints met realtime testing used usability testing usability testing check user interface easy use understand concerned mainly use application kind testing automated actual human users needed monitored skilled ui designers usability testing use structured models check well interface works stanton theofanos joshi model looks user experience alsharafat qadoumi model expert evaluation helping assess usability digital applications accessibility testing accessibility testing done ensure software accessible persons disabilities common web accessibility tests ensuring color contrast font background color appropriate font size alternate texts multimedia content ability use system using computer keyboard addition mouse common standards compliance americans disabilities act section amendment rehabilitation act web accessibility initiative wai world wide web consortium wc security testing security testing essential software processes confidential data prevent system intrusion hackers international organization standardization iso defines type testing conducted evaluate degree test item associated data information protected unauthorised persons systems use read modify authorized persons systems denied access internationalization localization testing internationalization localization validates software used different languages geographic regions process pseudolocalization used test ability application translated another language make easier identify localization process may introduce new bugs product globalization testing verifies software adapted new culture different currencies time zones actual translation human languages must tested possible localization globalization failures include messages may untranslated software often localized translating list strings context translator may choose wrong translation ambiguous source string technical terminology may become inconsistent project translated several people without proper coordination translator imprudent literal wordforword translations may sound inappropriate artificial technical target language untranslated messages original language may hard coded source code thus untranslatable messages may created automatically run time resulting string may ungrammatical functionally incorrect misleading confusing software may use keyboard shortcut function source languages keyboard layout used typing characters layout target language software may lack support character encoding target language fonts font sizes appropriate source language may inappropriate target language example cjk characters may become unreadable font small string target language may longer software handle may make string partly invisible user cause software crash malfunction software may lack proper support reading writing bidirectional text software may display images text localized localized operating systems may differently named system configuration files environment variables different formats date currency development testing main article development testing development testing software development process involves synchronized application broad spectrum defect prevention detection strategies order reduce software development risks time costs performed software developer engineer construction phase software development lifecycle development testing aims eliminate construction errors code promoted testing strategy intended increase quality resulting software well efficiency overall development process depending organizations expectations software development development testing might include static code analysis data flow analysis metrics analysis peer code reviews unit testing code coverage analysis traceability software testing practices ab testing main article ab testing ab testing method running controlled experiment determine proposed change effective current approach customers routed either current version control feature modified version treatment data collected determine version better achieving desired outcome concurrent testing main article concurrent testing concurrent concurrency testing assesses behaviour performance software systems use concurrent computing generally normal usage conditions typical problems type testing expose deadlocks race conditions problems shared memoryresource handling conformance testing type testing main article conformance testing software testing conformance testing verifies product performs according specified standards compilers instance extensively tested determine whether meet recognized standard language output comparison testing creating display expected output whether data comparison text screenshots ui sometimes called snapshot testing golden master testing unlike many forms testing detect failures automatically instead requires human evaluate output inconsistencies property testing confused property testing algorithms property testing testing technique instead asserting specific inputs produce specific expected outputs practitioner randomly generates many inputs runs program asserts truth property true every pair input output example every output serialization function accepted corresponding deserialization function every output sort function monotonically increasing list containing exactly elements input property testing libraries allow user control strategy random inputs constructed ensure coverage degenerate cases inputs featuring specific patterns needed fully exercise aspects implementation test property testing also sometimes known generative testing quickcheck testing since introduced popularized haskell library quickcheck metamorphic testing main article metamorphic testing metamorphic testing mt propertybased software testing technique effective approach addressing test oracle problem test case generation problem test oracle problem difficulty determining expected outcomes selected test cases determine whether actual outputs agree expected outcomes vcr testing vcr testing also known playback testing recordreplay testing testing technique increasing reliability speed regression tests involve component slow unreliable communicate often thirdparty api outside testers control involves making recording cassette systems interactions external component replaying recorded interactions substitute communicating external system subsequent runs test technique popularized web development ruby library vcr teamwork roles organization testers may separate team rest software development team may integrated one team software testing also performed nondedicated software testers term software tester started used denote separate profession notable software testing roles titles include test manager test lead test analyst test designer tester automation developer test administrator processes organizations develop software perform testing differently common patterns waterfall development information capability maturity model integration waterfall model waterfall development testing generally performed code completed product shipped customer practice often results testing phase used project buffer compensate project delays thereby compromising time devoted testing contend waterfall process allows testing start development project starts continuous process project finishes agile development agile software development commonly involves testing code written organizing teams programmers testers team members performing programming testing one agile practice testdriven software development tdd way unit testing unitlevel testing performed writing product code test code updated new features added failure conditions discovered bugs fixed commonly unit test code maintained project code integrated build process run build part regression testing goals continuous integration support development reduce defects even organizations separate teams programming testing functions many often programmers perform unit testing sample process sample common waterfall development activities commonly found development models might described differently requirements analysis testing begin requirements phase software development life cycle design phase testers work determine aspects design testable parameters tests work test planning test strategy test plan testbed creation since many activities carried testing plan needed test development test procedures test scenarios test cases test datasets test scripts use testing software test execution testers execute software based plans test documents report errors found development team part could complex running tests lack programming knowledge test reporting testing completed testers generate metrics make final reports test effort whether software tested ready release test result analysis defect analysis done development team usually along client order decide defects assigned fixed rejected ie found software working properly deferred dealt later defect retesting defect dealt development team retested testing team regression testing common small test program built subset tests integration new modified fixed software order ensure latest delivery ruined anything software product whole still working correctly test closure test meets exit criteria activities capturing key outputs lessons learned results logs documents related project archived used reference future projects quality main article software quality software verification validation main articles verification validation software software quality control software testing used association verification validation verification built software right ie implement requirements validation built right software ie deliverables satisfy customer terms verification validation commonly used interchangeably industry also common see two terms defined contradictory definitions according ieee standard glossary software engineering terminology verification process evaluating system component determine whether products given development phase satisfy conditions imposed start phase validation process evaluating system component end development process determine whether satisfies specified requirements according iso standard verification confirmation examination provision objective evidence specified requirements fulfilled validation confirmation examination provision objective evidence requirements specific intended use application fulfilled contradiction caused use concepts requirements specified requirements different meanings case ieee standards specified requirements mentioned definition validation set problems needs wants stakeholders software must solve satisfy requirements documented software requirements specification srs products mentioned definition verification output artifacts every phase software development process products fact specifications architectural design specification detailed design specification etc srs also specification verified least sense used subject iso specified requirements set specifications mentioned must verified specification previously explained product software development process phase receives another specification input specification verified successfully correctly implements input specification specifications verified except srs first one validated though examples design specification must implement srs construction phase artifacts must implement design specification words defined common terms apparent contradiction disappears srs software must validated srs validated statically consulting stakeholders nevertheless running partial implementation software prototype kind dynamic testing obtaining positive feedback increase certainty srs correctly formulated hand software final running product artifacts documents including source code must validated dynamically stakeholders executing software try might argue srs input words stakeholders therefore srs validation srs verification thinking way advisable causes confusion better think verification process involving formal technical input document software quality assurance organizations software testing part software quality assurance sqa process sqa software process specialists auditors concerned software development process rather artifacts documentation code systems examine change software engineering process reduce number faults end delivered software socalled defect rate constitutes acceptable defect rate depends nature software flight simulator video game would much higher defect tolerance software actual airplane although close links sqa testing departments often exist independently may sqa function companies software testing activity investigate software test order provide qualityrelated information stakeholders contrast qa quality assurance implementation policies procedures intended prevent defects reaching customers measures quality measures include topics correctness completeness security isoiec requirements capability reliability efficiency portability maintainability compatibility usability number frequently used software metrics measures used assist determining state software adequacy testing artifacts software testing process produce several artifacts actual artifacts produced factor software development model used stakeholder organisational needs test plan main article test plan test plan document detailing approach taken intended test activities plan may include aspects objectives scope processes procedures personnel requirements contingency plans test plan could come form single plan includes test types like acceptance system test plan planning considerations may issued master test plan provides overview one detailed test plan plan plan test plan cases part wide test strategy documents overall testing approaches may master test plan even separate artifact traceability matrix paragraphs excerpt traceability matrix software development traceability matrix tm document usually form table used assist determining completeness relationship correlating two baselined documents using manytomany relationship comparison often used highlevel requirements often consist marketing requirements detailed requirements product matching parts highlevel design detailed design test plan test cases test case main article test case test case normally consists unique identifier requirement references design specification preconditions events series steps also known actions follow input output expected result actual result clinically defined test case input expected result terse condition x derived result although normally test cases describe detail input scenario results might expected occasionally series steps often steps contained separate test procedure exercised multiple test cases matter economy one expected result expected outcome optional fields test case id test step order execution number related requirements depth test category author check boxes whether test automatable automated larger test cases may also contain prerequisite states steps descriptions test case also contain place actual result steps stored word processor document spreadsheet database common repositories database system may also able see past test results generated results system configuration used generate results past results would usually stored separate table test script test script procedure programming code replicates user actions initially term derived product work created automated regression test test case baseline create test scripts using tool program test suite section excerpt test suite software development test suite less commonly known validation suite collection test cases intended used test software program show specified set behaviors test suite often contains detailed instructions goals collection test cases information system configuration used testing group test cases may also contain prerequisite states steps descriptions following tests test fixture test data main article test fixture cases multiple sets values data used test functionality particular feature test values changeable environmental components collected separate files stored test data also useful provide data client product project techniques generate test data test harness main article test harness software samples data input output configurations referred collectively test harness test run test run collection test cases test suites user executing comparing expected actual results complete report executed tests may generated certifications information certification software testing several certification programs exist support professional aspirations software testers quality assurance specialists practitioners argue testing field ready certification mentioned controversy section controversy major software testing controversies include agile vs traditional testers learn work conditions uncertainty constant change aim process maturity agile testing movement received growing popularity since early mainly commercial circles whereas government military software providers use methodology also traditional testlast models eg waterfall model manual vs automated testing writers believe test automation expensive relative value used sparingly test automation considered way capture implement requirements general rule larger system greater complexity greater roi test automation also investment expertise amortized multiple projects right level knowledge sharing within organization existence iso software testing standard justified significant opposition formed ranks contextdriven school software testing iso standard professional testing associations international society software testing attempted standard withdrawn practitioners declare testing field ready certification certification offered actually requires applicant show ability test software certification based widely accepted body knowledge certification measure individuals productivity skill practical knowledge guarantee competence professionalism tester studies used show relative expense fixing defects opposing views applicability studies used show relative expense fixing defects depending introduction detection example commonly believed earlier defect found cheaper fix following table shows cost fixing defect depending stage found example problem requirements found postrelease would cost times fix already found requirements review advent modern continuous deployment practices cloudbased services cost redeployment maintenance may lessen time cost fix defect time detected requirements architecture construction system test postrelease time introduced requirements architecture construction data table extrapolated scant laurent bossavit says analysis smaller projects curve turns two teams firstyear students sample size small extrapolating smaller projects general totally indefensible gte study explain data say came two projects one large one small paper cited bell labs safeguard project specifically disclaims collected finegrained data boehms data points suggest ibm study fagans paper contains claims seem contradict boehms graph numerical results clearly correspond data points boehm doesnt even cite paper trw data except writing making software cited original article exists large study conducted trw right time boehm cite paper doesnt contain sort data would support boehms claims see also data validation process ensuring computer data correct useful crossbrowser testing checking web applications various browsers database testing testing databases domain testing dynamic program analysis analysis software performed running program formal verification proving disproving correctness certain intended algorithms graphical user interface testing term software engineeringpages displaying wikidata descriptions fallback independent test organization organization tests according agreed requirements manual testing testing software without automation orthogonal array testing software testing techniquepages displaying wikidata descriptions fallback pair testing software testing technique reverse semantic traceability quality control technique software testing tactics test management tool stores test steps test planning reporting trace table software testing technique web testing software testing focuses web applications references kaner cem november exploratory testing pdf quality assurance institute worldwide annual software testing conference orlando fl retrieved november b pan jiantao spring software testing coursework carnegie mellon university retrieved november b c kaner cem falk jack nguyen hung quoc testing computer software nd ed new york john wiley sons isbn leitner andreas ciupa ilinca oriol manuel meyer bertrand fiva arno september contract driven development test driven development writing test cases pdf esecfse european software engineering conference acm sigsoft symposium foundations software engineering dubrovnik croatia retrieved december b kolawa adam huizinga dorota automated defect prevention best practices software management wileyieee computer society press isbn cohn mike succeeding agile software development using scrum addisonwesley professional isbn molina alessandro crafting testdriven software python write test suites scale applications needs complexity using python pytest packt publishing isbn fernandes da costa lucas testing javascript applications manning isbn economic impacts inadequate infrastructure software testing pdf national institute standards technology may retrieved december b c myers glenford j art software testing john wiley sons isbn b ieee standard glossary software engineering terminology ieee doiieeestd isbn certified tester foundation level syllabus international software testing qualifications board march section archived original pdf october retrieved december certified tester foundation level syllabus pdf international software testing qualifications board july principle section archived original pdf december retrieved december ramler rudolf kopetzky theodorich platz wolfgang april combinatorial test design tosca testsuite lessons learned practical implications ieee fifth international conference software testing validation icst montreal qc canada doiicst kaner cem bach james pettichord bret lessons learned software testing contextdriven approach wiley pp isbn kolawa adam huizinga dorota automated defect prevention best practices software management wileyieee computer society press p isbn oconnor rory v akkaya mariye umay kemaneci kerem yilmaz murat poth alexander messnarz richard october systems software services process improvement nd european conference eurospi ankara turkey september october proceedings springer isbn bourque pierre fairley richard e eds chapter guide software engineering body knowledge ieee computer society isbn retrieved january bourque p fairley rd eds chapter software testing pdf swebok v guide software engineering body knowledge ieee pp isbn archived original pdf june retrieved july dooley j software development professional practice apress pp isbn wiegers k creating software engineering culture addisonwesley pp isbn kolawa adam huizinga dorota automated defect prevention best practices software management wileyieee computer society press p isbn b graham van veenendaal e evans foundations software testing cengage learning pp isbn b c oberkampf wl roy cj verification validation scientific computing cambridge university press pp isbn lee netravali sabnani kk sugla b john passive testing applications network management proceedings international conference network protocols ieee comput soc pp doiicnp isbn scid cem kaner tutorial exploratory testing archived wayback machine p cem kaner tutorial exploratory testing archived wayback machine p lee yannakakis principles methods testing finite state machinesa survey proceedings ieee doi petrenko yevtushenko n adaptive testing deterministic implementations specified nondeterministic fsms testing software systems rd ifip wg international conference ictss paris france november lecture notes computer science vol springer berlin heidelberg pp doi isbn petrenko yevtushenko n adaptive testing nondeterministic systems fsm ieee th international symposium highassurance systems engineering ieee pp doihase isbn b c limaye mg software testing tata mcgrawhill education pp isbn b c saleh ka software engineering j ross publishing pp isbn b c ammann p offutt j introduction software testing cambridge university press p isbn everatt gd mcleod jr r chapter functional testing software testing testing across entire software development life cycle john wiley sons pp isbn b cornett steve c code coverage analysis bullseye testing technology introduction retrieved november b black r pragmatic software testing becoming effective efficient test professional john wiley sons pp isbn simple example c function int fint xreturn xxx consists one statement tests specification fx succeed except x happens chosen patton ron software testing nd ed indianapolis sams publishing isbn laycock gilbert theory practice specification based software testing pdf dissertation thesis department computer science university sheffield retrieved january bach james june risk requirementsbased testing pdf computer retrieved august mathur ap foundations software testing pearson education india p isbn b clapp judith software quality control error analysis testing william andrew p isbn retrieved january mathur aditya p foundations software testing pearson education india p isbn lnnberg jan october visual testing software pdf msc thesis helsinki university technology retrieved january chima raspal visual testing test magazine archived original july retrieved january b c lewis software testing continuous quality improvement rd ed crc press pp isbn b ransome j misra core software security security source crc press pp isbn soa testing black white gray box white paper crosscheck networks archived original october retrieved december b myers g sandler c badgett thomas eds art software testing ed wiley isbn ammann paul offutt jeff january introduction software testing cambridge university press p isbn retrieved november b c lewis software testing continuous quality improvement rd ed crc press pp isbn machado p vincenzi maldonado jc chapter software testing overview borba p cavalcanti sampaio woodcook j eds testing techniques software engineering springer science business media pp isbn clapp ja stanten sf peng ww et al software quality control error analysis testing nova data corporation p isbn b c istqb ctfl syllabus pdf istqb international software testing qualifications board archived pdf original march retrieved april woods anthony j june operational acceptance application iso software testing standard whitepaper capgemini australia retrieved january standard glossary terms used software testing pdf version international software testing qualifications board retrieved january oreilly tim september web oreilly media section end software release cycle retrieved january auerbach adam august part pipeline continuous testing essential techwell insights techwell corp retrieved january philippedmonds cameron december relationship risk continuous testing interview wayne ariola stickyminds retrieved january ariola wayne dunlop cynthia october devops pushing bugs clients faster pdf pacific northwest software quality conference retrieved january auerbach adam october shift left put quality first techwell insights techwell corp retrieved january taqi farwa batool syeda hina arshad alia may development validation cloud applications usability development scale international journal humancomputer interaction doi issn section isoiecieee software systems engineering software testing part concepts definitions international organization standardization retrieved january globalization stepbystep worldready approach testing microsoft developer network microsoft developer network archived original june retrieved january claessen koen hughes john quickcheck proceedings fifth acm sigplan international conference functional programming icfp pp doi isbn scid gelperin david hetzel bill june growth software testing communications acm doi scid gregory janet crispin lisa agile testing addisonwesley professional pp isbn software testing lifecycle etestinghub testing phase software testing retrieved january dustin elfriede effective software testing addisonwesley professional p isbn b test driven development tdd agile alliance december retrieved march testdriven development continuous integration mobile applications microsoft developer network january retrieved march brown chris cobb gary culbertson robert april introduction rapid software testing tran eushiuan verificationvalidationcertification coursework carnegie mellon university retrieved august b gotel orlena clelandhuang jane hayes jane huffman zisman andrea egyed alexander grnbacher paul dekhtyar alex antoniol giuliano maletic jonathan january clelandhuang jane gotel orlena zisman andrea eds software systems traceability springer london doi isbn ieee ieee standard software test documentation new york ieee isbn pinto leandro sales sinha saurabh orso alessandro november understanding myths realities testsuite evolution proceedings acm sigsoft th international symposium foundations software engineering association computing machinery pp doi isbn scid strom david july part story software test performance collaborative archived original august griffiths teaching agile project management pmi agile development conference adc ieeeorg pp doiadc isbn scid willison john april agile software development agile force crosstalk april stsc archived original october example mark fewster dorothy graham software test automation addison wesley isbn stop commonsensetestingorg archived original october paul krill august software testers balk iso standards proposal infoworld kaner cem nsf grant proposal lay foundation significant improvements quality academic commercial courses software testing pdf archived original pdf november retrieved october kaner cem measuring effectiveness software testers pdf star east archived original pdf march retrieved january mcconnell steve code complete nd ed microsoft press p isbn bossavit laurent november cost defects illustrated history leprechauns software engineering folklore turns fact leanpub reading meyer bertrand august seven principles software testing pdf computer vol pp doimc retrieved november external links wikimedia commons media related software testing wikiversity learn teach others software testing department software testing software makes software better economistcom vtecomputer sciencenote template roughly follows acm computing classification systemhardware printed circuit board peripheral integrated circuit verylargescale integration system chip soc energy consumption green computing electronic design automation hardware acceleration processor size form computer systems organization computer architecture computational complexity dependability embedded system realtime computing cyberphysical system fault tolerance wireless sensor network networks network architecture network protocol network components network scheduler network performance evaluation network service software organization interpreter middleware virtual machine operating system software quality software notations programming paradigm programming domainspecific software framework integrated development environment software configuration management software library software repository software development control variable software development process requirements analysis software design software construction software deployment software engineering software maintenance programming team opensource model theory computation model computation stochastic formal computability theory computational complexity theory logic semantics algorithms algorithm design analysis algorithms algorithmic efficiency randomized algorithm computational geometry mathematics computing discrete mathematics probability statistics mathematical software information theory mathematical analysis numerical analysis theoretical computer science information systems database management system information storage systems enterprise information system social information systems geographic information system decision support system process control system multimedia information system data mining digital library computing platform digital marketing world wide web information retrieval security cryptography formal methods security hacker security services intrusion detection system hardware security network security information security application security humancentered computing interaction design augmented reality virtual reality social computing ubiquitous computing visualization accessibility humancomputer interaction mobile computing concurrency concurrent computing parallel computing distributed computing multithreading multiprocessing artificial intelligence natural language processing knowledge representation reasoning computer vision automated planning scheduling methodology control method philosophy artificial intelligence distributed artificial intelligence machine learning supervised learning unsupervised learning reinforcement learning multitask learning crossvalidation graphics animation rendering photograph manipulation graphics processing unit image compression solid modeling applied computing quantum computing ecommerce enterprise software computational mathematics computational physics computational chemistry computational biology computational social science computational engineering differentiable computing computational healthcare digital art electronic publishing cyberwarfare electronic voting video games word processing operations educational technology document management category outline glossaries vtesoftware engineeringfields computer programming devops empirical software engineering experimental software engineering formal methods requirements engineering based software engineering site reliability engineering social software engineering software deployment software design software maintenance software testing systems analysis concepts abstraction cicd compatibility backward compatibility compatibility layer compatibility mode forward compatibility software incompatibility componentbased software engineering data modeling enterprise architecture functional specification modeling software software archaeology software architecture software configuration management software development processmethodology software quality software quality assurance software system software verification validation structured analysis essential analysis orientations agile aspectoriented object orientation ontology sdlc service orientation modelsdevelopmental agile eup executable uml incremental model iterative model prototype model rad scrum spiral model vmodel waterfall model xp modeldriven engineering roundtrip engineering cmmi data model er model function model information model metamodeling object model spice systems model view model sysml uml usl related fields computer engineering computer science information science project management risk management systems engineering category commons vtesoftware testingtest levels acceptance testing system integration testing system testing integration testing unit testing test typestechniquestactics ab testing benchmark compatibility testing concolic testing concurrent testing conformance testing continuous testing destructive testing development testing differential testing dynamic program analysis installation testing negative testing random testing regression testing security testing smoke testing software software performance testing stress testing symbolic execution test automation usability testing xboxstyle blackbox testing allpairs testing exploratory testing fuzz testing modelbased testing scenario testing greybox testing whitebox testing api testing mutation testing static testing see also graphical user interface testing manual testing orthogonal array testing pair testing soak testing software reliability testing stress testing web testing authority control databases national czech republic retrieved httpsenwikipediaorgwindexphptitlesoftwaretestingoldid categories software testingsoftware engineering terminologyhidden categories webarchive template wayback linksarticles short descriptionshort description different wikidatause mdy dates december accuracy disputesarticles disputed statements september articles unsourced statementsarticles unsourced statements march articles excerptsarticles unsourced statements january articles unsourced statements july articles unsourced statements december articles unsourced statements february pages displaying wikidata descriptions fallback via moduleannotated linkcommons category link wikidata page last edited may utc text available creative commons attributionsharealike license additional terms may apply using site agree terms use privacy policy wikipedia registered trademark wikimedia foundation inc nonprofit organization privacy policy wikipedia disclaimers contact wikipedia code conduct developers statistics cookie statement mobile view toggle table contents software testing add topic